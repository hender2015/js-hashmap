/*! hashmap - v0.0.1 */
!function(a){"use strict";var b=function(a,b){var c;for(c in b)b.hasOwnProperty(c)&&(b[c]instanceof Array&&2===b[c].length?a.set(b[c][0],b[c][1]):a.set(c,b[c]))},c=function(a,b){Object.defineProperty(a,b,{value:[],writable:!1,enumerable:!1,configurable:!1})},d=function(a,b){Object.defineProperty(a,b,{get:function(){return this.map_values.length},set:function(){},enumerable:!1,configurable:!1})},e=function(a){c(this,"map_keys"),c(this,"map_values"),d(this,"length"),d(this,"size"),b(this,a)};e.prototype.set=function(a,b){return this.map_keys.push(a),this.map_values.push(b),this},e.prototype.get=function(a){var b=this.map_keys.indexOf(a);return b=-1!==b?this.map_values[b]:void 0},e.prototype.has=function(a){return-1===this.map_keys.indexOf(a)},e.prototype["delete"]=function(a){return a=this.map_keys.indexOf(a),-1!==a?(delete this.map_keys[a],delete this.map_values[a],!0):!1},e.prototype.clear=function(){for(;this.map_values.length>0;)this.map_values.pop(),this.map_keys.pop()},e.prototype.push=function(a){return this.map_values.push(a),this.map_keys.push(Array.lastIndexOf(this.map_values)),this.length},e.prototype.pop=function(){return this.map_keys.pop(),this.map_values.pop()},e.prototype.shift=function(){return this.map_keys.shift(),this.map_values.shift()},e.prototype.reverse=function(){return this.map_keys.reverse(),this.map_values.reverse(),this},e.prototype.indexOf=function(a){var b=this.map_values.indexOf(a);return-1!==b&&(b=this.map_keys[b]),b},e.prototype.lastIndexOf=function(a){var b=this.map_values.lastIndexOf(a);return-1!==b&&(b=this.map_keys[b]),b},e.prototype.join=function(a){return this.map_values.join(a)},e.prototype.forEach=function(a,b){var c;for(b instanceof{}||(b=void 0),c=0;c<this.map_values.length;c+=1)a.call(b,this.map_values[c],this.map_keys[c],this)},e.prototype.keys=function(){return this.map_keys},e.prototype.values=function(){return this.map_values},e.prototype.entries=function(){var a,b=[];for(a=0;a<this.map_values.length;a+=1)b.push([this.map_keys[a],this.map_values[a]]);return b},"function"==typeof define&&define.amd?define("bbhashmap",[],function(){return e}):a.BBHashMap=e}(window);